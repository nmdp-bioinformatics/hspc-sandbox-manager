# This project uses the GitFlow Workflow as defined here:
#   https://www.atlassian.com/git/tutorials/comparing-workflows#GitFlow-workflow
image: hspconsortium/hspc-ubuntu-base
clone:           # the 'clone' section
  depth: 1       # the depth, in this case the clone will contain last one commits

pipelines:
  default:
    - step:
        script:
          - echo "Please use a GitFlow branch"
          - exit 1;
  branches:
    develop:
      - step:
          name: build jar and upload to nexus
          caches:
            - node
          script:
            # get the ci scripts
            - git clone https://bitbucket.org/hspconsortium/sandbox-ci.git
            # build the set-env.sh script
            - . sandbox-ci/bitbucket-pipeline-scripts/build-set-env-for-npm.sh test 8080 100
            - ./ci-1-prepare-sources.sh
            - npm install
          artifacts:
            - set-env.sh
            - src/index.html
            - src/static/js/services.js
      - step:
          name: build docker and upload to docker hub
          script:
            - . set-env.sh
            - echo $IMAGE_COORDINATES
            # build docker image and push
            - docker login -u $DOCKER_ID -p $DOCKER_PASSWORD
            - docker build -t $IMAGE_COORDINATES .
            - docker push $IMAGE_COORDINATES
      - step:
          name: AUTOMATICALLY update the aws test service
          script:
            - . set-env.sh
            - export ACTIVE_ENV_SM=test
            # get the ci scripts
            - git clone https://bitbucket.org/hspconsortium/sandbox-ci.git
            # build the container-definition.json
            - . sandbox-ci/bitbucket-pipeline-scripts/build-container-definition.sh $ENC_PW_TEST
            # register the ECS task definition and capture the version
            - export TASK_VERSION=$(aws ecs register-task-definition --family "$AWS_CONTAINER_NAME" --container-definitions $(cat sandbox-ci/bitbucket-pipeline-scripts/container-definitions.json | jq -c '.')  | jq --raw-output '.taskDefinition.revision')
            - echo "Registered ECS Task Definition - $AWS_CONTAINER_NAME:$TASK_VERSION"
            # override the service name
            - export AWS_SERVICE_NAME=hspc-sandbox-manager-service
            # update the service to use the latest task definition
            - aws ecs update-service --cluster hspc-test --service "$AWS_SERVICE_NAME" --task-definition $AWS_CONTAINER_NAME:$TASK_VERSION
    master:
      - step:
          name: build jar and upload to nexus
          caches:
            - node
          script:
            # get the ci scripts
            - git clone https://bitbucket.org/hspconsortium/sandbox-ci.git
            # build the set-env.sh script
            - . sandbox-ci/bitbucket-pipeline-scripts/build-set-env-for-npm.sh prod 8080 100
            - ./ci-1-prepare-sources.sh
            - npm install
          artifacts:
            - set-env.sh
            - src/index.html
            - src/static/js/services.js
      - step:
          name: build docker and upload to docker hub
          script:
            - . set-env.sh
            - echo $IMAGE_COORDINATES
            # build docker image and push
            - docker login -u $DOCKER_ID -p $DOCKER_PASSWORD
            - docker build -t $IMAGE_COORDINATES .
            - docker push $IMAGE_COORDINATES
      - step:
          name: MANUALLY update the aws prod service
          trigger: manual
          script:
            - . set-env.sh
            - export ACTIVE_ENV_SM=prod
            # get the ci scripts
            - git clone https://bitbucket.org/hspconsortium/sandbox-ci.git
            # build the container-definition.json
            - . sandbox-ci/bitbucket-pipeline-scripts/build-container-definition.sh $ENC_PW_PROD
            # register the ECS task definition and capture the version
            - export TASK_VERSION=$(aws ecs register-task-definition --family "$AWS_CONTAINER_NAME" --container-definitions $(cat sandbox-ci/bitbucket-pipeline-scripts/container-definitions.json | jq -c '.')  | jq --raw-output '.taskDefinition.revision')
            - echo "Registered ECS Task Definition - $AWS_CONTAINER_NAME:$TASK_VERSION"
            # override the service name
            - export AWS_SERVICE_NAME=hspc-sandbox-manager-prod-service
            # update the service to use the latest task definition
            - aws ecs update-service --cluster hspc-prod --service "$AWS_SERVICE_NAME" --task-definition $AWS_CONTAINER_NAME:$TASK_VERSION
    feature/*:
      - step:
          script:
            - npm install
    release/*:
      - step:
          script:
            - npm install
    hotfix/*:
      - step:
          script:
            - npm install
options:
  docker: true